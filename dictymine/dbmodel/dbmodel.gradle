import org.dictybase.task.SOToModelTask

project(':dictymine:dbmodel') {
    ext.osName = 'os.production'
    ext.model = 'genomic'

    sourceSets {
        main {
            java {
                srcDirs = ["${buildDir}/gen/src"]
            }
            resources {
                srcDirs = ['resources', "${buildDir}/model"]
            }
        }
    }

    configurations {
        builder
        integration
    }

    dependencies {
        api project(':bio:core')
        api project(':intermine:model')
        api project(':imbuild:im-ant-tasks')
        api project(':intermine:integrate:model:fulldata')
        builder project(':intermine:objectstore')
        integration project(':intermine:objectstore')
        integration project(':intermine:integrate')
    }

    task copyModelFile(type: Copy, dependsOn: createBuildFolder) {
        description 'Copies genomic xml model files to build/model directory'
        from file("${project(':bio:core').projectDir}")
        into "${buildDir}/model"
        include "core.xml"
        rename "core.xml", "genomic_model.xml"
    }


    task copyGenomicProps(type: Copy, dependsOn: createBuildFolder) {
        from "${projectDir}/resources"
        into "${buildDir}/model"
        include 'genomic_*'
    }

    task copyAggregate() { 
        dependsOn copyDefaultProperty, copyMineProperty, copyModelFile, copyGenomicProps
    }

    task createSOModel(type: SOToModelTask, dependsOn: [copyAggregate]){
        description 'create so model xml definition file'

            soTermListFile  file("${rootDir}/bio/test-all/dbmodel/resources/so_term_list.txt")
            soFile  file("${rootDir}/bio/sources/so/data/so.obo2.5")
            outputFile  file("${buildDir}/model/so_additions.xml")
    }

    task mergeSourceModel(dependsOn: [
                            createSOModel, 
                            ':imbuild:im-ant-tasks:jar',
                        ]) {
        description 'merges all model defintions in xml format'
        doLast {
            ant.taskdef(
                name: 'mergesourcemodels',
                classname: 'org.intermine.task.MergeSourceModelsTask'
            ){
                classpath(id: 'task.class.path' ) {
                    pathelement(path: project(':bio:core').sourceSets.main.output.classesDir)
                    pathelement(path: project(':intermine:objectstore').sourceSets.main.output.classesDir)
                    pathelement(path: project(':intermine:model').sourceSets.main.output.classesDir) 	
                    pathelement(path: project(':imbuild:im-ant-tasks').sourceSets.main.output.classesDir) 	
                    pathelement(path: configurations.log4j.asPath)
                    pathelement(path: configurations.lang.asPath)
                }
            }
            ant.mergesourcemodels(
                classpathref: 'task.class.path',
                projectXml: "${mineDir}/project.xml",
                basedir: rootDir,
                modelFile: "${buildDir}/model/genomic_model.xml",
                extraModelPathsStart: "${mineName}/dbmodel/build/model/so_additions.xml" + ' ' + "bio/core/genomic_additions.xml",
                extraModelPathsEnd: ' '
            )
        }
    }

    task copyModelFileForCompile(type: Copy, dependsOn: mergeSourceModel) {
        description 'Copies genomic xml model files to build/main directory'
        from "${buildDir}/model/genomic_model.xml"
        into "${buildDir}/main"
    }

    task generateModel(dependsOn: copyModelFileForCompile) {
        description 'Generate genomic model classes from xml definition file'
        doLast {
            ant.taskdef(
                name: 'genomicModelOutput',
                classname: 'org.intermine.task.ModelOutputTask'
            ){
                classpath {
                    pathelement(path: project(':bio:core').sourceSets.main.output.classesDir)
                    pathelement(path: project(':intermine:objectstore').sourceSets.main.output.classesDir)
                    pathelement(path: project(':intermine:model').sourceSets.main.output.classesDir) 	
                    pathelement(path: configurations.log4j.asPath)
                    pathelement(path: configurations.lang.asPath)
                    pathelement(path: "${buildDir}/main")
                }
            }
            ant.genomicModelOutput(
                type: 'java',
                model: 'genomic',
                destdir: "${buildDir}/gen/src"
            )
        }
    }
    compileJava.dependsOn(generateModel)
    jar.dependsOn(compileJava)

    task buildDb() {
        description 'prepare(builds) database for running data integrations'
        dependsOn jar, insertModel, createIndexes, analyseDb
    }
    insertModel.mustRunAfter(jar)
    createIndexes.mustRunAfter(insertModel)
    analyseDb.mustRunAfter(createIndexes)
}
