import org.dictybase.task.SOToModelTask
import org.dictybase.task.MergeSourceModelsTask
import org.dictybase.task.ModelOutputTask;

project(':dictymine:dbmodel') {
    ext.osName = 'os.production'
    ext.model = 'genomic'

    sourceSets {
        main {
            java {
                srcDirs = ["${buildDir}/gen/src"]
            }
            resources {
                srcDirs = ['resources', "${buildDir}/model"]
            }
        }
    }

    configurations {
        builder
        integration
    }


    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId 'org.dictybase'
                artifactId 'dbmodel'
                version '1.7'

                from components.java
            }
        }
    }

    dependencies {
        api project(':bio:core')
        api project(':intermine:model')
        api project(':imbuild:im-ant-tasks')
        api project(':intermine:integrate:model:fulldata')
        builder project(':intermine:objectstore')
        integration project(':intermine:objectstore')
        integration project(':intermine:integrate')
    }

    task copyModelFile(type: Copy, dependsOn: createBuildFolder) {
        description 'Copies genomic xml model files to build/model directory'
        from file("${project(':bio:core').projectDir}")
        into "${buildDir}/model"
        include "core.xml"
        rename "core.xml", "genomic_model.xml"
    }


    task copyGenomicProps(type: Copy, dependsOn: createBuildFolder) {
        from "${projectDir}/resources"
        into "${buildDir}/model"
        include 'genomic_*'
    }

    task copyAggregate() { 
        dependsOn copyDefaultProperty, copyMineProperty, copyModelFile, copyGenomicProps
    }

    task createSOModel(type: SOToModelTask, dependsOn: [copyAggregate]){
        description 'create so model xml definition file'

            soTermListFile = file("${rootDir}/bio/test-all/dbmodel/resources/so_term_list.txt")
            soFile = file("${rootDir}/bio/sources/so/data/so.obo2.5")
            outputFile = file("${buildDir}/model/so_additions.xml")
    }

    task mergeSourceModel(type: MergeSourceModelsTask, dependsOn: createSOModel) {
        description 'merges all model defintions in xml format'

        projectXml = file("${mineDir}/project.xml")
        modelFile = file("${buildDir}/model/genomic_model.xml")
        extraModelPathsStart = files("${projectDir}/build/model/so_additions.xml",
                                        "${rootDir}/bio/core/genomic_additions.xml")

    }

    task copyModelFileForCompile(type: Copy, dependsOn: mergeSourceModel) {
        description 'Copies genomic xml model files to build/main directory'
        from "${buildDir}/model/genomic_model.xml"
        into "${buildDir}/main"
    }


    task generateModel(type: ModelOutputTask, dependsOn: copyModelFileForCompile) {
        description 'Generate genomic model classes from xml definition file'

        type = 'java'
        model = 'genomic'
        destDir = file("${buildDir}/gen/src")
    }

    compileJava.dependsOn(generateModel)
    jar.dependsOn(compileJava)

    task buildDb() {
        description 'prepare(builds) database for running data integrations'
        dependsOn jar, insertModel, createIndexes, analyseDb
    }
    insertModel.mustRunAfter(jar)
    createIndexes.mustRunAfter(insertModel)
    analyseDb.mustRunAfter(createIndexes)
}
