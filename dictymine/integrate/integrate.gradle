project(':dictymine:integrate') {

    ext.osName = 'os.common-tgt-items-std'
    ext.model = 'fulldata'

    configurations {
        builder
        integration
        gff3converter
        log4j
        hikari
        pg
        cglib
        torque
        torquegen
    }

    dependencies {
        builder project(':intermine:objectstore')
        builder project(':intermine:integrate')
        gff3converter project(':bio:core')
        integration project(':intermine:objectstore')
        integration project(':intermine:integrate')
        cglib group: 'cglib', name: 'cglib', version: '3.1'
		torque group: 'org.apache.torque', name: 'torque', version: '3.3'
		torquegen group: 'torque', name: 'torque-gen', version: '3.3'
    }

    task copyAggregate { 
        dependsOn copyLog4jProp, copyDefaultProperty, copyMineProperty
    }

    task jarAggregate {
        dependsOn {
                [
                    ':intermine:model:jar',
                    ':intermine:objectstore:jar',
                    ':intermine:integrate:jar', 
                    ':intermine:integrate:model:fulldata:jar',
                    ':bio:core:jar',
                    ':dictymine:dbmodel:jar',
                ]
            }
    }

    //task loadSourceInTgtItems {
        //def srcName = project.hasProperty('source') ? source : null
        //doLast {
            //if (srcName.contains(',')) {
                //srcName.tokenize(',').each {
                    //loadTgtSource(project, it)
                //}
            //} else {
                //loadTgtSource(project, srcName)
            //}
        //}
    //}
    //loadSourceInTgtItems.dependsOn {
        //def srcName = project.hasProperty('source') ? source : null
        //def baseDep = [':bio:core:jar', ':intermine:objectstore:jar', ':dictymine:dbmodel:jar']
        //if (srcName.contains(',')) {
            //srcName.tokenize(',').each { 
                //def srcType = projXmltoType(projectXml, it)
                //baseDep.add(":bio:sources:${srcType}:jar")
            //}
        //} else {
            //def srcType = projXmltoType(projectXml, srcName)
            //baseDep.add(":bio:sources:${srcType}:jar")
        //}
        //baseDep
    //}

    //task buildTgtItemsDb {
        //description 'preapre(builds) items database for running integration'
        //dependsOn copyAggregate, jarAggregate, insertModel, loadSourceInTgtItems, createIndexes, analyseDb
    //}
    //insertModel.mustRunAfter(jarAggregate)
    //loadSourceInTgtItems.mustRunAfter(insertModel)
    //createIndexes.mustRunAfter(loadSourceInTgtItems)
    //analyseDb.mustRunAfter(createIndexes)

    task loadData {
        description 'load data into production database'
        def srcName = project.hasProperty('source') ? source : null
        doLast {
            def runner = new TaskRunner()
            if (srcName == 'all') {
                runner.runAll(mineSources,project)
            } else if (srcName.contains(',')) {
                runner.runAll(srcName.tokenize(','), project)
            } else {
                runner.makeXmlModel(project)
                runner.prepareDatabase(project)
                runner.insertDbModel(project)
                runner.loadTgtSource(project, srcName)
                runner.createDbIndexes(project)
                runner.analyseDatabase(project)
                runner.loadTgtToProd(project, srcName)
            }
        }
    }
    loadData.dependsOn {
        def srcName = project.hasProperty('source') ? source : null
        def baseDep = []
        def runner = new TaskRunner()
        if (srcName == 'all') {
            mineSources.each {
                def srcType = runner.projXmltoType(projectXml, it)
                baseDep.add(":bio:sources:${srcType}:jar")
            }
        } else if (srcName.contains(',')) {
            srcName.tokenize(',').each { 
                def srcType = runner.projXmltoType(projectXml, it)
                baseDep.add(":bio:sources:${srcType}:jar")
            }
        } else {
            def srcType = runner.projXmltoType(projectXml, srcName)
            baseDep.add(":bio:sources:${srcType}:jar")
        }
        baseDep
    }

    task loadSource {
        description 'integrate data from sources into database'
        dependsOn copyAggregate, jarAggregate, loadData
    }
    jarAggregate.mustRunAfter(copyAggregate)
    loadData.mustRunAfter(jarAggregate)
    loadSource.onlyIf { project.hasProperty('source') }

    task testModule {
        doLast {
            def runner = new TaskRunner()
            runner.testThat(project)
        }
    }
}

project(':bio:sources:discoideum-ax4') {
    dependencies {
        api project(':bio:core')
    }

    sourceSets {
        main {
            resources {
                srcDirs = ['resources', "${projectDir}/resources"]
            }
        }
    }
}

project(':bio:sources:dictyostelid') {
    dependencies {
        api project(':bio:core')
    }

    sourceSets {
        main {
            resources {
                srcDirs = ['resources', "${projectDir}/resources"]
            }
        }
    }
}

project(':bio:sources:entrez-organism') {
    dependencies {
        api project(':bio:core')
        api project(':dictymine:dbmodel')
    }

    sourceSets {
        main {
            resources {
                srcDirs = ['resources', "${projectDir}/resources"]
            }
        }
    }
}
