// $ANTLR : "dictybase_iql.g" -> "IqlParser.java"$

package org.dictybase.objectstore.query.iql;

public interface IqlTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int IQL_STATEMENT = 4;
	int SELECT_LIST = 5;
	int FROM_LIST = 6;
	int WHERE_CLAUSE = 7;
	int GROUP_CLAUSE = 8;
	int ORDER_CLAUSE = 9;
	int SELECT_VALUE = 10;
	int TABLE_ALIAS = 11;
	int FIELD_ALIAS = 12;
	int TABLE = 13;
	int TABLE_NAME = 14;
	int SUBQUERY = 15;
	int SUBQUERY_LIMIT = 16;
	int CONSTANT = 17;
	int FIELD = 18;
	int FIELD_NAME = 19;
	int SAFE_FUNCTION = 20;
	int UNSAFE_FUNCTION = 21;
	int CONSTRAINT = 22;
	int NOT_CONSTRAINT = 23;
	int AND_CONSTRAINT_SET = 24;
	int OR_CONSTRAINT_SET = 25;
	int SUBQUERY_CONSTRAINT = 26;
	int SUBQUERY_EXISTS_CONSTRAINT = 27;
	int CONTAINS_CONSTRAINT = 28;
	int NOTLIKE = 29;
	int BAG_CONSTRAINT = 30;
	int TYPECAST = 31;
	int FIELD_PATH_EXPRESSION = 32;
	int OBJECTSTOREBAG = 33;
	int ORDER_DESC = 34;
	int BAGS_FOR = 35;
	int COLLECTION_SELECT_LIST = 36;
	int COLLECTION_SELECT_VALUE = 37;
	int LITERAL_explain = 38;
	int LITERAL_select = 39;
	int LITERAL_all = 40;
	int LITERAL_distinct = 41;
	int COMMA = 42;
	int LITERAL_from = 43;
	int LITERAL_where = 44;
	int LITERAL_group = 45;
	int LITERAL_by = 46;
	int LITERAL_order = 47;
	int LITERAL_as = 48;
	int IDENTIFIER = 49;
	int DOT = 50;
	int OPEN_PAREN = 51;
	int LITERAL_union = 52;
	int LITERAL_intersect = 53;
	int LITERAL_except = 54;
	int LITERAL_allbutintersect = 55;
	int LITERAL_desc = 56;
	int COLONTYPE = 57;
	int CLOSE_PAREN = 58;
	int LITERAL_bag = 59;
	int INTEGER = 60;
	int LITERAL_bags = 61;
	int LITERAL_for = 62;
	int LITERAL_in = 63;
	int QUESTION_MARK = 64;
	int LITERAL_limit = 65;
	int QUOTED_STRING = 66;
	int FLOAT = 67;
	int LITERAL_true = 68;
	int LITERAL_false = 69;
	int LITERAL_null = 70;
	int LITERAL_singleton = 71;
	int LITERAL_count = 72;
	int ASTERISK = 73;
	int LITERAL_max = 74;
	int LITERAL_min = 75;
	int LITERAL_sum = 76;
	int LITERAL_avg = 77;
	int LITERAL_substr = 78;
	int LITERAL_indexof = 79;
	int LITERAL_lower = 80;
	int LITERAL_upper = 81;
	int LITERAL_stddev = 82;
	int LITERAL_greatest = 83;
	int LITERAL_least = 84;
	int LITERAL_ceil = 85;
	int LITERAL_floor = 86;
	int PLUS = 87;
	int PERCENT = 88;
	int DIVIDE = 89;
	int POWER = 90;
	int MINUS = 91;
	int ISNULL = 92;
	int ISNOTNULL = 93;
	int EQ = 94;
	int NOT_EQ = 95;
	int LITERAL_not = 96;
	int LITERAL_or = 97;
	int LITERAL_and = 98;
	int LITERAL_exists = 99;
	int LITERAL_does = 100;
	int LITERAL_exist = 101;
	int LITERAL_contains = 102;
	int LITERAL_contain = 103;
	int LT = 104;
	int GT = 105;
	int LE = 106;
	int GE = 107;
	int LITERAL_like = 108;
	int SEMI = 109;
	int AT_SIGN = 110;
	int VERTBAR = 111;
	int WS = 112;
}
